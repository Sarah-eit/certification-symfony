questions:
  -
    uuid: 1efda55d-ad74-615e-8805-e3bb337e6cb7
    question: 'Which statement correctly describes the purpose of the built-in `assets.package` service in Symfony?'
    answers:
      - { value: 'It adds an asset package to the application', correct: true }
      - { value: 'It adds an asset package to an entity', correct: false }
      - { value: 'It adds an asset package to Monolog', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#assets-package'
  -
    uuid: 1efda55e-c3de-66d2-9d68-07bfd4bc47c7
    question: 'Which statements are correct about the built-in service tag `auto_alias` in Symfony?'
    answers:
      - { value: 'It dynamically defines service aliases based on container parameters', correct: true }
      - { value: "With the auto_alias tag, aliased services don't have to be private", correct: true }
      - { value: 'It defines aliases using Symfony log parameters', correct: false }
      - { value: "With the auto_alias tag, aliased services must be private", correct: false }

    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#auto-alias'
  -
    uuid: 1efda55f-6922-69ae-97a0-b3dee3c3a084
    question: 'Which statement is correct about the built-in service tag `console.command` in Symfony?'
    answers:
      - { value: 'It registers a command so it can be used in the console', correct: true }
      - { value: 'It adds a console interface to the application', correct: false }
      - { value: 'It registers a command specifically inside controllers', correct: false }

    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#console-command'
  -
    uuid: 1efda560-5225-6ca0-9a10-658392271a5f
    question: 'Which statements are correct about the built-in service tag `container.hot_path` in Symfony?'
    answers:
      - { value: 'It marks services as always needed and optimizes them for performance', correct: true }
      - { value: 'It is only applied to a very short list of bootstrapping services', correct: true }
      - { value: 'It adds a list of access paths to controllers', correct: false }
      - { value: 'It is applied to a large list of bootstrapping services', correct: false }

    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#container-hot-path'
  -
    uuid: 1efda561-c645-642c-b254-35ed3a0be9e1
    question: 'Which statements are correct about the built-in service tag `container.no_preload` in Symfony?'
    answers:
      - { value: 'It prevents a class from being preloaded by PHP', correct: true }
      - { value: 'If you use a service tagged with "container.no_preload" as an argument of another service, the tag is automatically applied to the latter as well', correct: true }
      - { value: 'If you use a service tagged with "container.no_preload" as an argument of another service, the tag is not automatically applied to the latter', correct: false }
      - { value: 'It removes a class from the list of repositories', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#container-no-preload'
  -
    uuid: 1efda564-7a22-6448-9102-7ff34e270ec4
    question: 'Which statements are correct about the built-in service tag `container.preload` in Symfony?'
    answers:
      - { value: 'It ensures that a class is included in the list of classes preloaded by PHP', correct: true }
      - { value: 'This can improve performance by making some of the classes used by your service always available for all requests (until the server is restarted)', correct: true }
      - { value: 'It adds a class to the list of repositories', correct: false }
      - { value: "This can't improve performance", correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#container-preload'
  -
    uuid: 1efda567-848b-62f6-bdad-59d341bce3fd
    question: 'Which statements are correct about the built-in service tag `controller.argument_value_resolver` in Symfony?'
    answers:
      - { value: 'It registers a resolver that provides values to controller arguments like "Request"', correct: true }
      - { value: 'Value resolvers implement the ValueResolverInterface and are used to resolve argument values for controllers', correct: true }
      - { value: 'Value resolvers implement the ValueArgumentResolverInterface and are used to resolve argument values for controllers', correct: false }
      - { value: 'It registers a resolver for controller arguments only in API mode', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#controller-argument-value-resolver'
  -
    uuid: 1efda56b-b56e-673e-92cb-01ee98d4d409
    question: 'Which statement is correct about the built-in service tag `data_collector` in Symfony?'
    answers:
      - { value: 'It creates a class that collects custom data for the Symfony profiler', correct: true }
      - { value: 'It creates a class that collects custom data for the database', correct: false }
      - { value: '"data_collector" does not exist', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#data-collector'
  -
    uuid: 1efda56d-8aac-6ac6-9b49-fb197c5f7531
    question: 'Which statement is correct about the built-in service tag `doctrine.event_listener` in Symfony?'
    answers:
      - { value: 'It registers a Doctrine event listener', correct: true }
      - { value: 'It registers a Doctrine event listener only if the database is MySQL', correct: false }
      - { value: 'None of them', correct: false }

    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#doctrine-event-listener'
  -
    uuid: 1efda570-ea7d-6772-819c-69079b7e39b8
    question: 'Which statement is correct about the built-in service tag `doctrine.event_subscriber` in Symfony?'
    answers:
      - { value: 'It registers a Doctrine event subscriber', correct: true }
      - { value: 'It registers a Doctrine event subscriber only if the database is MySQL', correct: false }
      - { value: 'None of them', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#doctrine-event-subscriber'
  -
    uuid: 1efda571-c2a0-66a4-b651-253633409d63
    question: 'Which statement is correct about the built-in service tag `form.type` in Symfony?'
    answers:
      - { value: 'It allows you to define a custom form field type', correct: true }
      - { value: 'It allows you to define a custom form field type only in API projects', correct: false }
      - { value: 'None of the above', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#form-type'
  -
    uuid: 1efda572-907d-6bbc-9278-e1f43cf1afd1
    question: 'What is the role of the `form.type_extension` built-in service in Symfony?'
    answers:
      - { value: 'It allows creating a custom form extension to modify or extend existing form types.', correct: true }
      - { value: 'It allows creating a custom form extension only if the project is an API.', correct: false }
      - { value: 'It is not related to form extensions.', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#form-type-extension'
  -
    uuid: 1efda573-9e87-6c5c-9131-d1d58464ef92
    question: 'Which statements are correct about the built-in service tag `form.type_guesser` in Symfony?'
    answers:
      - { value: 'It lets you implement custom logic to guess form field types', correct: true }
      - { value: 'By default, form guessing is based on validation metadata and ORM metadata like Doctrine or Propel', correct: true }
      - { value: 'It allows you to add a form template for Twig', correct: false }
      - { value: 'Form guessing is based on database configuration or AbstractType configuration', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#form-type-guesser'
  -
    uuid: 1efda579-ab1b-6a8a-b103-d7b1a37dcf08
    question: 'Which statements are correct about the built-in service tag `kernel.cache_clearer` in Symfony?'
    answers:
      - { value: 'It lets your service run during the cache clearing process', correct: true }
      - { value: 'Cache clearing occurs whenever you run the "cache:clear" command', correct: true }
      - { value: 'You can register your own custom cache clearer', correct: true }
      - { value: 'It runs your service when the browser reloads without cache', correct: false }
      - { value: 'Cache clearing happens when the browser reloads without cache', correct: false }
      - { value: 'You cannot register your own custom cache clearer', correct: false }

    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#kernel-cache-clearer'
  -
    uuid: 1efda57a-9c5a-6784-b5a9-d1e70fb15898
    question: 'Which statements are correct about the built-in service tag `kernel.cache_warmer` in Symfony?'
    answers:
      - { value: 'It runs your service during the cache warming process', correct: true }
      - { value: 'Cache warming happens when running "cache:warmup" or "cache:clear", unless --no-warmup is used', correct: true }
      - { value: 'To create a cache warmer, your service must implement the CacheWarmerInterface', correct: true }
      - { value: 'If a cache warmer fails, Symfony retries it automatically on the next request', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#kernel-cache-warmer'
  -
    uuid: 1efda57b-c301-6206-9b12-d160ab8989c9
    question: 'Which statements are correct about the built-in service tag `kernel.event_listener` in Symfony?'
    answers:
      - { value: 'It lets your service listen to events and hooks in Symfony', correct: true }
      - { value: 'During a Symfony applicationâ€™s lifecycle, various events are triggered and custom events can also be dispatched', correct: true }
      - { value: 'This tag allows you to connect your own classes to these events', correct: true }
      - { value: 'Custom events cannot be dispatched in a Symfony application', correct: false }
      - { value: 'This tag is only for hooking vendor classes into events', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#kernel-event-listener'
  -
    uuid: 1efda57d-b14a-6f88-ae12-e3677fdfb298
    question: 'Which statements are correct about the built-in service tag `kernel.event_subscriber` in Symfony?'
    answers:
      - { value: 'It lets a service subscribe to multiple events in Symfony', correct: true }
      - { value: 'It is the recommended way to listen to events instead of using kernel.event_listener', correct: true }
      - { value: 'It only allows subscribing to a single event', correct: false }
      - { value: 'It is not the recommended way to create event listeners', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#kernel-event-subscriber'
  -
    uuid: 1efda57e-69c6-636e-ac2c-4364b4a147f0
    question: 'Which statements are correct about the built-in service tag `kernel.fragment_renderer` in Symfony?'
    answers:
      - { value: 'It lets you define a custom HTTP content rendering strategy', correct: true }
      - { value: 'You can create a class that implements FragmentRendererInterface, register it as a service, and tag it with "kernel.fragment_renderer"', correct: true }
      - { value: 'It is not possible to add custom rendering strategies beyond the core ones like EsiFragmentRenderer', correct: false }
      - { value: 'It lets you define a custom XML rendering strategy', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#kernel-fragment-renderer'
  -
    uuid: 1efda580-abbd-6856-ab51-d5e03c36831b
    question: 'Which statements are correct about the built-in service tag `kernel.locale_aware` in Symfony?'
    answers:
      - { value: 'It allows a service to access and react to the current request locale', correct: true }
      - { value: 'To register your own locale-aware service, implement the LocaleAwareInterface', correct: true }
      - { value: 'It only works in the test environment', correct: false }
      - { value: 'To register your own locale-aware service, implement the LocaleLanguageAwareInterface', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#kernel-locale-aware'
  -
    uuid: 1efda581-9363-6642-80a6-837f110cd1aa
    question: 'Which statements are correct about the built-in service tag `kernel.reset` in Symfony?'
    answers:
      - { value: 'It resets services between requests to prevent data leaks and ensure clean state', correct: true }
      - { value: 'It resets services in all main requests (not sub-requests), except the first one', correct: true }
      - { value: 'It is especially useful when Symfony is reused across requests in an application server', correct: true }
      - { value: 'It resets services only during sub-requests', correct: false }
      - { value: 'It doesnâ€™t help performance in persistent environments like application servers', correct: false }
      - { value: 'It resets services only when the server is restarted', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#kernel-reset'
  -
    uuid: 1efda582-543c-63be-bc09-2f65ed594ab4
    question: 'Which statement is correct about the built-in service tag `mime.mime_type_guesser` in Symfony?'
    answers:
      - { value: 'It allows you to define custom logic for guessing MIME types', correct: true }
      - { value: "This tag doesn't exist", correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#mime-mime-type-guesser'
  -
    uuid: 1efda583-1fe1-6140-bbaf-2be8b0f2ee00
    question: 'Which statements are correct about the built-in service tag `monolog.logger` in Symfony?'
    answers:
      - { value: 'It lets you use a custom logging channel with Monolog', correct: true }
      - { value: 'Monolog allows handlers to be shared between multiple channels, and you can specify the channel when injecting the logger', correct: true }
      - { value: 'It forces you to use a single logging channel with Monolog', correct: false }
      - { value: 'Monolog does not support multiple logging channels', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#monolog-logger'
  -
    uuid: 1efda584-37cb-6b38-940e-25d9ea277c99
    question: 'Which statements are correct about built-in services : monolog.processor ?'
    answers:
      - { value: 'Monolog allows you to add processors in the logger or in the handlers to add extra data in the records. A processor receives the record as an argument and must return it after adding some extra data in the "extra" attribute of the record.', correct: true }
      - { value: 'The built-in IntrospectionProcessor can be used to add the file, the line, the class and the method where the logger was triggered.', correct: true }
      - { value: 'In the configuration, you can add differents attributes like "handler" or "channel".', correct: true }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#monolog-processor'
  -
    uuid: 1efdc885-3dd7-6d0a-b6af-ff4ab3319ae2
    question: 'Which statements are correct about the built-in service tag `routing.loader` in Symfony?'
    answers:
      - { value: 'It allows registering a custom service that loads routing configuration', correct: true }
      - { value: 'To enable your loader, register it as a service and tag it with "routing.loader"', correct: true }
      - { value: 'It registers a custom service that loads templates', correct: false }
      - { value: 'You should tag it with "routing.templates"', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#routing-loader'
  -
    uuid: 1efdc8ab-5404-603a-a3e1-61312deb8ab1
    question: 'Which statements are correct about the built-in service tag `routing.expression_language_provider` in Symfony?'
    answers:
      - { value: 'It registers custom expression functions to use in routing expressions', correct: true }
      - { value: 'This tag automatically adds providers for routing expression functions', correct: true }
      - { value: 'It registers functions for controller expressions', correct: false }
      - { value: 'It adds providers to the controller expression language instead of routing', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#routing-expression-language-provider'
  -
    uuid: 1efdc8b5-0944-686a-b80e-e3689db9770d
    question: 'Which statements are correct about the built-in service tag `security.voter` in Symfony?'
    answers:
      - { value: "It lets you add a custom voter to Symfony's authorization system", correct: true }
      - { value: 'When calling isGranted(), Symfony uses voters to determine access, and this tag allows you to plug in your own', correct: true }
      - { value: "It registers a voter used for authentication (not authorization)", correct: false }
      - { value: 'Itâ€™s related to a tag called "security.voting", not "security.voter"', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#security-voter'
  -
    uuid: 1efdc8b9-f190-6584-8b59-477d72e5fae4
    question: 'Which statements are correct about the built-in service tag `serializer.encoder` in Symfony?'
    answers:
      - { value: 'It registers a new encoder for the Serializer component', correct: true }
      - { value: 'The tagged class should implement both EncoderInterface and DecoderInterface', correct: true }
      - { value: 'It registers an encoder for the "EncoderDecoder" service', correct: false }
      - { value: 'It requires implementing EncoderSerializingInterface and DecoderSerializingInterface', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#serializer-encoder'
  -
    uuid: 1efdc8c1-9919-6484-9460-0589d118f1cc
    question: 'Which statements are correct about the built-in service tag `serializer.normalizer` in Symfony?'
    answers:
      - { value: 'It registers a new normalizer for the Serializer service', correct: true }
      - { value: 'The tagged class must implement both NormalizerInterface and DenormalizerInterface', correct: true }
      - { value: 'You can inspect normalizer priorities with: "php bin/console debug:container --tag serializer.normalizer"', correct: true }
      - { value: 'It registers a normalizer in the EncoderDecoder service', correct: false }
      - { value: 'It requires implementing NormalizerSerializingInterface and DenormalizerSerializingInterface', correct: false }
      - { value: 'You can inspect normalizers with "php bin/console container --tag EncoderDecoder.normalizer"', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#serializer-normalizer'
  -
    uuid: 1efdc8d5-1d81-6e34-8c13-2740cf3e99b1
    question: 'Which statements are correct about the built-in service tag `translation.loader` in Symfony?'
    answers:
      - { value: 'You must register your loader service and tag it with "translation.loader"', correct: true }
      - { value: 'The "alias" option defines the file suffix used for this loader (e.g. "messages.fr.bin")', correct: true }
      - { value: 'You should use the "translating.loading" tag instead', correct: false }
      - { value: 'The alias is not important and not required', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#translation-loader'
  -
    uuid: 1efdc8e0-2fe8-6086-893d-b5b89d134c90
    question: 'Which statements are correct about the built-in service tag `translation.extractor` in Symfony?'
    answers:
      - { value: 'It lets you create a custom service to extract translation messages from files', correct: true }
      - { value: 'The translation:extract command uses these extractors to find translation keys (e.g. in Twig templates)', correct: true }
      - { value: 'It extracts messages from a database', correct: false }
      - { value: 'It uses extractors designed for database content like "TwigExtractorMessage"', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#translation-extractor'
  -
    uuid: 1efdc905-6559-668c-9b78-f397aca14f64
    question: 'Which statements are correct about the built-in service tag `translation.dumper` in Symfony?'
    answers:
      - { value: 'It allows dumping translation messages into a specific file format', correct: true }
      - { value: 'To define a custom dumper, extend FileDumper or implement DumperInterface and tag your service with "translation.dumper"', correct: true }
      - { value: 'It allows dumping messages to a database instead of files', correct: false }
      - { value: 'Custom dumpers use the tag "translator.dump"', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#translation-dumper'
  -
    uuid: 1efdc91b-192a-6b06-b337-e11c4f786956
    question: 'Which statements are correct about the built-in service tag `translation.provider_factory` in Symfony?'
    answers:
      - { value: 'It registers a factory for creating custom translation providers', correct: true }
      - { value: 'To register one, tag your service with "translation.provider_factory"', correct: true }
      - { value: 'It registers a factory for custom template providers', correct: false }
      - { value: 'It must be tagged with "translator.template_provider_factory"', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#translation-provider-factory'
  -
    uuid: 1efdc921-945a-65be-b6b6-0f6a7a0cb6ca
    question: 'Which statements are correct about the built-in service tag `twig.extension` in Symfony?'
    answers:
      - { value: 'To enable a Twig extension, register it as a service and tag it with "twig.extension"', correct: true }
      - { value: 'With the default services.yaml, extensions are auto-registered and auto-tagged â€” but manual registration is also possible', correct: true }
      - { value: 'It should be tagged with "template.extension" instead', correct: false }
      - { value: 'It cannot be registered manually', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#twig-extension'
  -
    uuid: 1efdc93c-9a1e-6cfa-ac9d-59ff1ec99cf7
    question: 'Which statements are correct about the built-in service tag `twig.loader` in Symfony?'
    answers:
      - { value: 'By default, Symfony uses FilesystemLoader. You can register a custom loader and tag it with "twig.loader"', correct: true }
      - { value: 'You can optionally set a "priority" (default is 0) to control which loader runs first', correct: true }
      - { value: 'Symfony uses multiple loaders by default like FilesystemTwigLoader', correct: false }
      - { value: 'The "priority" option is required and defaults to 1', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#twig-loader'
  -
    uuid: 1efdc948-8ea2-6500-90bc-59f07b3a89a8
    question: 'Which statements are correct about the built-in service tag `twig.runtime` in Symfony?'
    answers:
      - { value: 'It registers a custom lazy-loaded Twig runtime extension', correct: true }
      - { value: 'Lazy-loaded extensions must be regular services tagged with "twig.runtime"', correct: true }
      - { value: 'They are auto-registered with the default config, but can also be registered manually', correct: true }
      - { value: 'It is for lazy-loaded template extensions, not Twig runtime extensions', correct: false }
      - { value: 'Use the "twig.loading" tag instead for lazy-loading', correct: false }
      - { value: 'You cannot register them manually', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#twig-runtime'
  -
    uuid: 1efdc955-f448-6fd2-9904-f91545187910
    question: 'Which statement is correct about the built-in service tag `validator.constraint_validator` in Symfony?'
    answers:
      - { value: 'Syntax is correct', correct: true }
      - { value: 'Correct tag is `validation.constraint`', correct: false }
      - { value: 'Correct tag is `validating.constraint.validator`', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#validator-constraint-validator'
  -
    uuid: 1efdc95c-a2b3-64f4-a30b-c38aeaa9ede1
    question: 'Which statements are correct about the built-in service tag `validator.initializer` in Symfony?'
    answers:
      - { value: 'It registers a service that prepares objects before validation', correct: true }
      - { value: 'This uncommon tag allows actions on objects just before they are validated', correct: true }
      - { value: 'You must implement ObjectInitializerInterface and tag the service with "validator.initializer"', correct: true }
      - { value: 'It registers a service that prepares objects after validation', correct: false }
      - { value: 'It allows actions after validation', correct: false }
      - { value: 'You must implement InitializationObjectInterface and tag with "validation.object"', correct: false }
    help: 'https://symfony.com/doc/7.0/reference/dic_tags.html#validator-initializer'
